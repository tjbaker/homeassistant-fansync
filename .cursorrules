# Cursor Code Style Rules for this repository

# Style & Formatting
- Use Black/Ruff exactly as configured in pyproject.toml (line length 100, Python 3.13).
- Follow PEP 8 principles; Black/Ruff are authoritative for enforcement.
- Optimize for clarity and readability; prefer explicit types where helpful.

# Imports
- Organize imports consistent with Ruff isort settings.
  - known-first-party: ["fansync", "custom_components"]
  - Do not force single-line imports.
  - Group order: standard library, third-party, first-party.

# Linting (mirror pyproject Ruff rules)
- Enable Ruff rules: [E, F, I, B, UP].
- Respect per-file ignores from pyproject:
  - tests/**/*.py: [E501, F401, I001]
  - examples/**/*.py: [E501, F401, F403, B904]
  - fansync/**/*.py: [E501, F401, F403]
  - Prefer modern typing:
    - Use X | None instead of Optional[X].
    - Import Callable/Iterable/etc. from collections.abc, not typing.

# Comments
- Keep comments concise and only when adding non-obvious context.

# Home Assistant specifics
- Use HA async patterns (`async_*` methods); avoid blocking I/O in the event loop.
- Prefer CoordinatorEntity for entities with push updates.
 - For push-based entities, set update_interval=None and push via coordinator.async_set_updated_data.
 - Use optimistic updates for user commands and reconcile on push ack to avoid UI snap-back.

# Testing
- Always add new tests, ensure they pass, and requisite code coverage is met when adding new functionality
 - Use pytest; do not make real network calls. Patch httpx/websocket at module paths (custom_components.fansync.client.*).
 - Coverage focus in CI is custom_components/fansync; target ≥ 60%.
 - For HA services, ensure no blocking I/O in event loop (use hass.async_add_executor_job).

# Git / Commits
- Commit message subject MUST be ≤ 72 characters (to avoid GitHub truncation).
- Prefer imperative mood for subjects; wrap body lines at ~72 characters.
