# SPDX-License-Identifier: GPL-2.0-only
name: CI

on:
  # Run on pushes to main (and tags), not on feature branches
  push:
    branches:
      - main
    tags:
      - 'v*'
  # Run for PRs targeting main
  pull_request:
    branches:
      - main

# Avoid duplicate parallel runs for the same ref/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -r requirements-dev.txt

      - name: Ruff (lint)
        run: ruff check --force-exclude custom_components/fansync tests

      - name: Black (format check)
        run: |
          set -euo pipefail
          FILES=$(find custom_components/fansync tests -type f -name '*.py' -print || true)
          if [ -z "$FILES" ]; then
            echo "No target Python files. Skipping Black."
            exit 0
          fi
          python -m black --check --diff --color $FILES

      - name: Mypy (type check)
        run: |
          set -euo pipefail
          mypy --check-untyped-defs --exclude 'venv|\.venv|examples' custom_components/fansync

      - name: Pytest (with coverage)
        run: pytest -q --cov=custom_components/fansync --cov-report=xml --cov-report=term-missing --cov-fail-under=75

      - name: Upload coverage to Codecov
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
